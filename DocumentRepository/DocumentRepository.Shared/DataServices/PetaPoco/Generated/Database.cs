// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `ImageGallery`
//     Provider:               `MySql.Data.MySqlClient`
//     Connection String:      `Datasource=127.0.0.1;Database=DakarPOS-DEV;uid=root;pwd=1234;;Port=3306`
//     Schema:                 ``
//     Include Views:          `False`



using PetaPoco;
using System;
using System.Collections.Generic;
using System.Reflection.Metadata;

namespace DocumentRepository.Shared.DataServices
{

    public partial class DocumentDataRepository : Database
    {
        public DocumentDataRepository()
            : base("Document-DEV")
        {
            CommonConstruct();
        }

        public DocumentDataRepository(string connectionName) : base(connectionName)
        {
            CommonConstruct();
        }

        partial void CommonConstruct();

        public interface IFactory
        {
            DocumentDataRepository GetInstance();
        }

        public static IFactory Factory { get; set; }
        public static DocumentDataRepository GetInstance()
        {
            if (_instance != null)
                return _instance;

            if (Factory != null)
                return Factory.GetInstance();
            else
                return new DocumentDataRepository();
        }

        [ThreadStatic] static DocumentDataRepository _instance;

        public override void OnBeginTransaction()
        {
            if (_instance == null)
                _instance = this;
        }

        public override void OnEndTransaction()
        {
            if (_instance == this)
                _instance = null;
        }


        public class Record<T> where T : new()
        {
            public static DocumentDataRepository repo { get { return DocumentDataRepository.GetInstance(); } }
            public bool IsNew() { return repo.IsNew(this); }
            public object Insert() { return repo.Insert(this); }

            public void Save() { repo.Save(this); }
            public int Update() { return repo.Update(this); }

            public int Update(IEnumerable<string> columns) { return repo.Update(this, columns); }
            public static int Update(string sql, params object[] args) { return repo.Update<T>(sql, args); }
            public static int Update(Sql sql) { return repo.Update<T>(sql); }
            public int Delete() { return repo.Delete(this); }
            public static int Delete(string sql, params object[] args) { return repo.Delete<T>(sql, args); }
            public static int Delete(Sql sql) { return repo.Delete<T>(sql); }
            public static int Delete(object primaryKey) { return repo.Delete<T>(primaryKey); }
            public static bool Exists(object primaryKey) { return repo.Exists<T>(primaryKey); }
            public static bool Exists(string sql, params object[] args) { return repo.Exists<T>(sql, args); }
            public static T SingleOrDefault(object primaryKey) { return repo.SingleOrDefault<T>(primaryKey); }
            public static T SingleOrDefault(string sql, params object[] args) { return repo.SingleOrDefault<T>(sql, args); }
            public static T SingleOrDefault(Sql sql) { return repo.SingleOrDefault<T>(sql); }
            public static T FirstOrDefault(string sql, params object[] args) { return repo.FirstOrDefault<T>(sql, args); }
            public static T FirstOrDefault(Sql sql) { return repo.FirstOrDefault<T>(sql); }
            public static T Single(object primaryKey) { return repo.Single<T>(primaryKey); }
            public static T Single(string sql, params object[] args) { return repo.Single<T>(sql, args); }
            public static T Single(Sql sql) { return repo.Single<T>(sql); }
            public static T First(string sql, params object[] args) { return repo.First<T>(sql, args); }
            public static T First(Sql sql) { return repo.First<T>(sql); }
            public static List<T> Fetch(string sql, params object[] args) { return repo.Fetch<T>(sql, args); }
            public static List<T> Fetch(Sql sql) { return repo.Fetch<T>(sql); }
            public static List<T> Fetch(long page, long itemsPerPage, string sql, params object[] args) { return repo.Fetch<T>(page, itemsPerPage, sql, args); }
            public static List<T> Fetch(long page, long itemsPerPage, Sql sql) { return repo.Fetch<T>(page, itemsPerPage, sql); }
            public static List<T> SkipTake(long skip, long take, string sql, params object[] args) { return repo.SkipTake<T>(skip, take, sql, args); }
            public static List<T> SkipTake(long skip, long take, Sql sql) { return repo.SkipTake<T>(skip, take, sql); }
            public static Page<T> Page(long page, long itemsPerPage, string sql, params object[] args) { return repo.Page<T>(page, itemsPerPage, sql, args); }
            public static Page<T> Page(long page, long itemsPerPage, Sql sql) { return repo.Page<T>(page, itemsPerPage, sql); }
            public static IEnumerable<T> Query(string sql, params object[] args) { return repo.Query<T>(sql, args); }
            public static IEnumerable<T> Query(Sql sql) { return repo.Query<T>(sql); }

        }

    }

    [TableName("Users")]
    [PrimaryKey("UserId")]
    [ExplicitColumns]
    public partial class User : DocumentDataRepository.Record<User>
    {
        [Column]
        public int UserId { get; set; }
        [Column]
        public string FirstName { get; set; }
        [Column]
        public string LastName { get; set; }
        [Column]
        public string Email { get; set; }
        [Column]
        public string Password { get; set; }
        [Column]
        public DateTime CreatedOn { get; set; }
    }

    [TableName("Documents")]
    [PrimaryKey("DocumentId")]
    [ExplicitColumns]
    public partial class Document : DocumentDataRepository.Record<Document>
    {
        [Column]
        public int DocumentId { get; set; }
        [Column]
        public string Title { get; set; }
        [Column]
        public string DocURL { get; set; }
        [Column]
        public string Extension { get; set; }
        [Column]
        public decimal Size { get; set; }
        [Column]
        public bool IsVisible { get; set; }
        [Column]
        public DateTime CreatedOn { get; set; }
        [Column]
        public int CreatedBy { get; set; }
        [Column]
        public DateTime? UpdatedOn { get; set; }
        [Column]
        public int? UpdatedBy { get; set; }
    }

    [TableName("Keywords")]
    [PrimaryKey("KeywordId")]
    [ExplicitColumns]
    public partial class Keyword : DocumentDataRepository.Record<Keyword>
    {
        [Column]
        public int KeywordId { get; set; }
        [Column]
        public string Title { get; set; }
        [Column]
        public DateTime CreatedOn { get; set; }
        [Column]
        public int CreatedBy { get; set; }
    }

    [TableName("DocumentKeywords")]
    [PrimaryKey("DocumentKeywordId")]
    [ExplicitColumns]
    public partial class DocumentKeyword : DocumentDataRepository.Record<DocumentKeyword>
    {
        [Column]
        public int DocumentKeywordId { get; set; }
        [Column]
        public int DocumentId { get; set; }
        [Column]
        public int KeywordId { get; set; }
        [Column]
        public DateTime CreatedOn { get; set; }
        [Column]
        public int CreatedBy { get; set; }
    }

}